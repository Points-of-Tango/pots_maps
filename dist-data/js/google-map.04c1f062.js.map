{"version":3,"file":"js/google-map.04c1f062.js","mappings":"0IAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,GAAK,QAAQ,CAACF,EAAG,UAAU,CAACG,IAAI,SAASC,YAAY,CAAC,MAAQ,OAAO,OAAS,SAASF,MAAM,CAAC,GAAK,QAAQ,OAASN,EAAIS,OAAO,KAAOT,EAAIU,YAAY,CAACV,EAAIW,GAAIX,EAAW,SAAE,SAASY,EAAEC,GAAO,OAAOT,EAAG,cAAc,CAACU,IAAID,EAAMN,IAAI,SAASQ,UAAS,EAAKT,MAAM,CAAC,SAAWM,EAAE,WAAY,GAAMI,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAOjB,EAAIkB,iBAAiBN,EAAGC,EAAM,IAAI,IAAGT,EAAG,mBAAmB,CAACG,IAAI,aAAaD,MAAM,CAAC,QAAUN,EAAImB,YAAY,SAAWnB,EAAIoB,cAAc,OAASpB,EAAIqB,gBAAgBL,GAAG,CAAC,WAAa,SAASC,GAAQjB,EAAIqB,gBAAiB,CAAK,MAAM,IAAI,EAAE,EACnqBC,EAAkB,G,6CC4BtB,SACA,iBACA,OACA,UACA,YACA,WACA,+BAGA,gBACA,OACA,aACA,aACA,WACA,aACA,QACA,WAGA,iBACA,mBACA,kBACA,sCACA,WACA,WACA,kBACA,aAEA,EACA,OACA,uBACA,gBACA,kBACA,GAEA,8BACA,gDACA,aACA,qCACA,sCACA,SACA,wBACA,2BAEA,UACA,wBACA,0BAEA,gBACA,wBACA,yBACA,YACA,sBACA,YACA,YACA,sBACA,YACA,QACA,kBACA,YACA,0BAEA,yCACA,SACA,wBACA,2BAEA,UACA,wBACA,0BAEA,gBACA,wBACA,yBACA,YACA,kBACA,YACA,oBACA,kBACA,oBAGA,GACA,GACA,EACA,SACA,kCACA,gDACA,aACA,qCACA,iBACA,SACA,wBACA,2BAEA,UACA,wBACA,0BAEA,gBACA,wBACA,yBACA,YACA,sBACA,YACA,YACA,sBACA,YACA,QACA,kBACA,cAGA,GACA,GACA,EACA,+BACA,kBACA,aACA,UACA,WAGA,qBACA,0LAIA,+LAGA,+KACA,oEACA,+DACA,kDACA,sGAMA,0LAIA,8NAGA,sJACA,2FACA,4EACA,iFAOA,qBACA,uBAGA,qBACA,0CAMA,uBACA,mBAEA,EACA,qBACA,mBACA,EACA,gCACA,sDACA,UACA,sBACA,uBAEA,GACA,ICpNyP,I,cCQrPC,GAAY,OACd,EACAxB,EACAuB,GACA,EACA,KACA,KACA,MAIF,QAAeC,EAAiB,O","sources":["webpack://post-maps/./src/components/GoogleMap.vue?ba2f","webpack://post-maps/src/components/GoogleMap.vue","webpack://post-maps/./src/components/GoogleMap.vue?5faa","webpack://post-maps/./src/components/GoogleMap.vue"],"sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"map\"}},[_c('GmapMap',{ref:\"mapRef\",staticStyle:{\"width\":\"100%\",\"height\":\"500px\"},attrs:{\"id\":\"mapId\",\"center\":_vm.center,\"zoom\":_vm.zoomLevel}},[_vm._l((_vm.markers),function(m,index){return _c('gmap-marker',{key:index,ref:\"marker\",refInFor:true,attrs:{\"position\":m,\"clickable\":true},on:{\"click\":function($event){return _vm.toggleInfoWindow(m, index)}}})}),_c('gmap-info-window',{ref:\"infoWindow\",attrs:{\"options\":_vm.infoOptions,\"position\":_vm.infoWindowPos,\"opened\":_vm.infoWindowOpen},on:{\"closeclick\":function($event){_vm.infoWindowOpen = false}}})],2)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div id=\"map\">\n    <GmapMap\n      id=\"mapId\"\n      ref=\"mapRef\"\n      :center=\"center\"\n      :zoom=\"zoomLevel\"\n      style=\"width: 100%; height: 500px\"\n    >\n      <gmap-marker\n        v-for=\"(m, index) in markers\"\n        :key=\"index\"\n        ref=\"marker\"\n        :position=\"m\"\n        :clickable=\"true\"\n        @click=\"toggleInfoWindow(m, index)\"\n      />\n      <gmap-info-window\n        ref=\"infoWindow\"\n        :options=\"infoOptions\"\n        :position=\"infoWindowPos\"\n        :opened=\"infoWindowOpen\"\n        @closeclick=\"infoWindowOpen = false\"\n      />\n    </GmapMap>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'GoogleMap',\n  props: {\n    location: {\n      required: true,\n      type: Array,\n      default: () => []\n    }\n  },\n  data () {\n    return {\n      organizer: '',\n      infoOptions: {\n        content: '',\n        pixelOffset: {\n          width: 0,\n          height: 0\n        }\n      },\n      currentMidx: null,\n      infoWindowPos: null,\n      infoWindowOpen: false,\n      center: { lat: 51.5060031, lng: -0.1003099 },\n      markers: [],\n      address: [],\n      currentPlace: null,\n      zoomLevel: 11\n    }\n  },\n  watch: {\n    location: function (newVal, oldVal) {\n      this.markers = []\n      this.populateMap()\n    }\n  },\n  mounted () {\n    this.$refs.mapRef.$mapPromise.then((map) => {\n      this.markers = []\n      this.location.forEach((element) => {\n        if (element.location !== undefined && element.section === 'Events') {\n          map.panTo({\n            lat: element.location.latitude,\n            lng: element.location.longitude\n          })\n          this.center = {\n            lat: element.location.latitude,\n            lng: element.location.longitude\n          }\n          this.markers.push({\n            lat: element.location.latitude,\n            lng: element.location.longitude,\n            name: element.name,\n            cancelled: element.cancelled,\n            type: element.type,\n            logo: element.logo,\n            organizer: element.organizer,\n            from: element.from,\n            to: element.to,\n            address: element.address,\n            city: element.city,\n            section: element.section\n          })\n        } else if (element.location !== undefined && element.section === 'Teachers') {\n          map.panTo({\n            lat: element.location.latitude,\n            lng: element.location.longitude\n          })\n          this.center = {\n            lat: element.location.latitude,\n            lng: element.location.longitude\n          }\n          this.markers.push({\n            lat: element.location.latitude,\n            lng: element.location.longitude,\n            name: element.name,\n            picture: element.picture,\n            city: element.city,\n            postcode: element.postcode,\n            section: element.section,\n            contact: element.contact\n          })\n        }\n      })\n    })\n  },\n  methods: {\n    populateMap () {\n      this.$refs.mapRef.$mapPromise.then((map) => {\n        this.markers = []\n        this.location.forEach((element) => {\n          if (element.location !== undefined) {\n            map.panTo({\n              lat: element.location.latitude,\n              lng: element.location.longitude\n            })\n            this.center = {\n              lat: element.location.latitude,\n              lng: element.location.longitude\n            }\n            this.markers.push({\n              lat: element.location.latitude,\n              lng: element.location.longitude,\n              name: element.name,\n              cancelled: element.cancelled,\n              type: element.type,\n              logo: element.logo,\n              organizer: element.organizer,\n              from: element.from,\n              to: element.to,\n              address: element.address,\n              city: element.city\n            })\n          }\n        })\n      })\n    },\n    toggleInfoWindow (item, index) {\n      this.zoomLevel = 13\n      this.center = {\n        lat: item.lat,\n        lng: item.lng\n      }\n\n      if (item.section === 'Events') {\n        this.infoOptions.content = `\n        <div class=\"card border-0 pr-4\">\n          <div class=\"card-body\">\n            <div style=\"float: left;\" class=\"mr-3\">\n              ${item.logo === undefined ? '<div/>' : `<img src=${item.logo} width=\"80\" height=\"80\" class=\"rounded-circle\">`}\n            </div>\n            <div style=\"float: left;\">\n                <h4 ${item.cancelled === false ? '' : 'class=\"cancelled text-muted\"'}>${item.name}${item.cancelled === false ? '' : ' - CANCELLED'}</h4>\n                <p class=\"font-weight-bold\"> ${item.type}</p>\n                <p class=\"font-weight-bold\">${item.from} - ${item.to}</p>\n                <h6>${item.organizer}</h6>\n                <h6>${item.address} - ${item.city}</h6>\n            </div>\n          </div>\n        </div>\n      `\n      } else {\n        this.infoOptions.content = `\n        <div class=\"card border-0 pr-4\">\n          <div class=\"card-body\">\n            <div style=\"float: left;\" class=\"mr-3\">\n              ${item.picture === undefined ? '<div/>' : `<img src=${item.picture} width=\"80\" height=\"80\" class=\"rounded-circle\">`}\n            </div>\n            <div style=\"float: left;\">\n                <h6 class=\"font-weight-bold\"> ${item.name}</h6>\n                <p class=\"font-weight-bold\"> <a target=\"_blank\" style=\"color: white; text-decoration:underline\" href=\"mailto:${item.contact.email}\">${item.contact.email}</a></p>\n                <p> ${item.contact.phone === undefined ? '' : item.contact.phone}</p>\n                <p> ${item.postcode}</p>\n            </div>\n          </div>\n        </div>\n      `\n      }\n\n      this.infoWindowPos = item\n      this.infoWindowOpen = true\n\n      // check if it's the same marker that was selected if yes toggle\n      if (this.currentMidx === index) {\n        this.infoWindowOpen = !this.infoWindowOpen\n        // eslint-disable-next-line brace-style\n      }\n\n      // if different marker set infowindow to open and reset current marker index\n      else {\n        this.infoWindowOpen = true\n        this.currentMidx = index\n      }\n    },\n    setPlace (place) {\n      this.currentPlace = place\n    },\n    geolocate: function () {\n      navigator.geolocation.getCurrentPosition((position) => {\n        this.center = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        }\n      })\n    }\n  }\n}\n</script>\n\n<style>\n.card,\n.gm-style .gm-style-iw-c,\n.gm-style-iw-t::after {\n  background-color: #660404 !important;\n  color: white;\n}\n\n.card {\n  border: none !important;\n}\n\n.gm-style-iw-t {\n  right: 0px;\n  bottom: 55px !important;\n}\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./GoogleMap.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./GoogleMap.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./GoogleMap.vue?vue&type=template&id=59906f46&\"\nimport script from \"./GoogleMap.vue?vue&type=script&lang=js&\"\nexport * from \"./GoogleMap.vue?vue&type=script&lang=js&\"\nimport style0 from \"./GoogleMap.vue?vue&type=style&index=0&id=59906f46&prod&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","ref","staticStyle","center","zoomLevel","_l","m","index","key","refInFor","on","$event","toggleInfoWindow","infoOptions","infoWindowPos","infoWindowOpen","staticRenderFns","component"],"sourceRoot":""}